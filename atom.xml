<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八面</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://l_min.gitee.io/"/>
  <updated>2020-09-07T04:40:57.556Z</updated>
  <id>https://l_min.gitee.io/</id>
  
  <author>
    <name>八面</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pdo和mysqli的区别</title>
    <link href="https://l_min.gitee.io/2020/09/07/pdoORmysqli/"/>
    <id>https://l_min.gitee.io/2020/09/07/pdoORmysqli/</id>
    <published>2020-09-07T02:05:18.000Z</published>
    <updated>2020-09-07T04:40:57.556Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当用PHP访问数据库时，除了PHP自带的数据库驱动，我们一般还有两种比较好的选择：PDO和MySQLi。在实际开发过程中要决定选择哪一种首先要对二者有一个比较全面的了解。本文就针对他们的不同点进行分析，并对多数据库类型支持、稳定性、性能等等方面进行对比。</p><table><thead><tr><th></th><th>PDO</th><th>MySQLi</th></tr></thead><tbody><tr><td>Database support</td><td><code>12 different drivers</code></td><td><code>MySQL only</code></td></tr><tr><td>API</td><td><code>OOP</code></td><td><code>OOP + procedural</code></td></tr><tr><td>Connection</td><td><code>Easy</code></td><td><code>Easy</code></td></tr><tr><td>Named parameters</td><td><code>Yes</code></td><td><code>No</code></td></tr><tr><td>Object mapping</td><td><code>Yes</code></td><td><code>Yes</code></td></tr><tr><td>Prepared statements (client side)</td><td><code>Yes</code></td><td><code>No</code></td></tr><tr><td>Performance</td><td><code>Fast</code></td><td><code>Fast</code></td></tr><tr><td>Stored procedures</td><td><code>Yes</code></td><td><code>Yes</code></td></tr></tbody></table><h4 id="一、连接"><a href="#一、连接" class="headerlink" title="一、连接"></a>一、连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// PDO</span><br><span class="line"><span class="variable">$pdo</span> = new PDO(<span class="string">&quot;mysql:host=localhost;dbname=database&quot;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">// mysqli, procedural way</span><br><span class="line"><span class="variable">$mysqli</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;database&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">// mysqli, object oriented way</span><br><span class="line"><span class="variable">$mysqli</span> = new mysqli(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;database&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="二、API-支持"><a href="#二、API-支持" class="headerlink" title="二、API 支持"></a>二、API 支持</h4><p>PDO和MySQLi都是通过面向对象的形式提供API，但是同时MySQLi也提供了面向过程的API，这种形式对于新手来说更容易理解。如果你对原生的php mysql 驱动熟悉，你会发现很轻松得就能使用MySQLi的接口来替换原来的数据访问。用PDO的好处是，PDO支持多种数据库，而MySQLi只支持MySQL，一但你掌握了就你可以随心所欲的使用连接多种数据库。</p><h4 id="三、数据库的支持"><a href="#三、数据库的支持" class="headerlink" title="三、数据库的支持"></a>三、数据库的支持</h4><img src= "/img/loading.gif" data-src="/2020/09/07/pdoORmysqli/882728.jpg">PDO比MySQLi最大的优点就是PDO支持很多种数据库，而MySQLi只支持MySQLi。要看PDO支持哪些数据库用下面的代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(PDO::getAvailableDrivers());</span><br></pre></td></tr></table></figure><p>支持多数据库有什么好处呢？当你的程序以后想从mysql换成sql server或者oracle时，PDO的优势就能体现出来了，因为换数据库对于程序接口是透明的，php代码改动很小，如果你是用MySQLi，那么所有用到数据库的地方都要重写，这样的改动我也只能呵呵了。</p><h4 id="四、命名参数支持"><a href="#四、命名参数支持" class="headerlink" title="四、命名参数支持"></a>四、命名参数支持</h4><p>PDO命名参数及参数绑定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$params</span> = array(<span class="string">&#x27;:username&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;:email&#x27;</span> =&gt; <span class="variable">$mail</span>, <span class="string">&#x27;:last_login&#x27;</span> =&gt; time() - 3600);</span><br><span class="line">     </span><br><span class="line"><span class="variable">$pdo</span>-&gt;prepare(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    SELECT * FROM users</span></span><br><span class="line"><span class="string">    WHERE username = :username</span></span><br><span class="line"><span class="string">    AND email = :email</span></span><br><span class="line"><span class="string">    AND last_login &gt; :last_login&#x27;</span>);</span><br><span class="line">     </span><br><span class="line"><span class="variable">$pdo</span>-&gt;execute(<span class="variable">$params</span>);</span><br></pre></td></tr></table></figure><p>而MySQLi的参数绑定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$query &#x3D; $mysqli-&gt;prepare(&#39;</span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    WHERE username &#x3D; ?</span><br><span class="line">    AND email &#x3D; ?</span><br><span class="line">    AND last_login &gt; ?&#39;);</span><br><span class="line">     </span><br><span class="line">$query-&gt;bind_param(&#39;sss&#39;, &#39;test&#39;, $mail, time() - 3600);</span><br><span class="line">$query-&gt;execute();</span><br></pre></td></tr></table></figure><p>我们从上面对比就可以看出PDO是通过命名参数进行值的绑定，而MySQLi的参数绑定是通过点位符“?”并严格按这个问号的顺序来绑定值。这样虽然代码显得没有PDO那种通过名字对应那么长，但是有一个不好的地方是可读性和可维护性都降低了，参数个数比较少的时候还不觉得，当参数上了10多个或者更多的情况就比较痛苦了，你必须要按问号的顺序来一个一个对应来赋值，万一其中一个位错了，后面的都跟着错了。</p><p>不幸的是MySQLi不支持PDO那样的命名参数绑定。</p><h4 id="五、对象映射（Object-Mapping）"><a href="#五、对象映射（Object-Mapping）" class="headerlink" title="五、对象映射（Object Mapping）"></a>五、对象映射（Object Mapping）</h4><p>基于数据库的开发一般都是从数据库中读取数据然后把这些数据用一个对象来承载。PDO和MySQLi都支持对象映射，假设有一个User类,它有一些属性对应到数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    public <span class="variable">$id</span>;</span><br><span class="line">    public <span class="variable">$first_name</span>;</span><br><span class="line">    public <span class="variable">$last_name</span>;</span><br><span class="line">     </span><br><span class="line">    public <span class="keyword">function</span> info()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&#x27;#&#x27;</span>.<span class="variable">$this</span>-&gt;id.<span class="string">&#x27;: &#x27;</span>.<span class="variable">$this</span>-&gt;first_name.<span class="string">&#x27; &#x27;</span>.<span class="variable">$this</span>-&gt;last_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有对象映射，我们要读取数据之后，一个一个字段的赋值，这是很繁琐的。</p><p>下面请看二者使用对象的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT id, first_name, last_name FROM users&quot;</span>;</span><br><span class="line">     </span><br><span class="line">// PDO</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$pdo</span>-&gt;query(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$result</span>-&gt;setFetchMode(PDO::FETCH_CLASS, <span class="string">&#x27;User&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$user</span> = <span class="variable">$result</span>-&gt;fetch()) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$user</span>-&gt;info().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">// MySQLI, procedural way</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span> = mysqli_query(<span class="variable">$mysqli</span>, <span class="variable">$query</span>)) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$user</span> = mysqli_fetch_object(<span class="variable">$result</span>, <span class="string">&#x27;User&#x27;</span>)) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$user</span>-&gt;info().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// MySQLi, object oriented way</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;query(<span class="variable">$query</span>)) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$user</span> = <span class="variable">$result</span>-&gt;fetch_object(<span class="string">&#x27;User&#x27;</span>)) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$user</span>-&gt;info().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六、安全性"><a href="#六、安全性" class="headerlink" title="六、安全性"></a>六、安全性</h4><img src= "/img/loading.gif" data-src="/2020/09/07/pdoORmysqli/882728-20170308233839359-1894402861.gif"><p>二者都可以防止sql注入。我们先看一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&quot;&#x27;; DELETE FROM users; /*&quot;</span></span><br></pre></td></tr></table></figure><p>当用户输入的username参数的值为上面的值（”‘; DELETE FROM users; /*”），如果你没有对这个值做任何处理，用户就成功将delete语句注入，那么user表的记录就会被全部删除。</p><h5 id="6-1、手动转义"><a href="#6-1、手动转义" class="headerlink" title="6.1、手动转义"></a>6.1、手动转义</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// PDO, <span class="string">&quot;manual&quot;</span> escaping</span><br><span class="line"><span class="variable">$username</span> = PDO::quote(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$pdo</span>-&gt;query(<span class="string">&quot;SELECT * FROM users WHERE username = <span class="variable">$username</span>&quot;</span>);</span><br><span class="line">         </span><br><span class="line">// mysqli, <span class="string">&quot;manual&quot;</span> escaping</span><br><span class="line"><span class="variable">$username</span> = mysqli_real_escape_string(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$mysqli</span>-&gt;query(<span class="string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="variable">$username</span>&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面采用了PDO和MySQLi的API自带的函数对获取到的参数的值进行了转义。</p><h5 id="6-2、prepared-statement参数绑定"><a href="#6-2、prepared-statement参数绑定" class="headerlink" title="6.2、prepared statement参数绑定"></a>6.2、prepared statement参数绑定</h5><p>下面推荐更加高效安全的prepared statement参数绑定的方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// PDO, prepared statement</span><br><span class="line"><span class="variable">$pdo</span>-&gt;prepare(<span class="string">&#x27;SELECT * FROM users WHERE username = :username&#x27;</span>);</span><br><span class="line"><span class="variable">$pdo</span>-&gt;execute(array(<span class="string">&#x27;:username&#x27;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]));</span><br><span class="line"> </span><br><span class="line">// mysqli, prepared statements</span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$mysqli</span>-&gt;prepare(<span class="string">&#x27;SELECT * FROM users WHERE username = ?&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;execute();</span><br></pre></td></tr></table></figure><h4 id="七、性能"><a href="#七、性能" class="headerlink" title="七、性能"></a>七、性能</h4><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  由于PDO能够支持其它非MySQL的数据库，而MySQLi专门针对MySQL设计的，所以MySQLi相对于PDO性能稍微好一些。但是PDO和MySQLi都还是没有PHP原生的MySQL扩展快。但是这样性能比较其实意义不太大，因为它们都是相当快了，如果你的程序性能要求不是特别苛刻话，三者都可以满足你。至于你要选择哪一种就要你根据的实践情况进行权衡。</p><h4 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h4><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  PDO支持12种数据库驱动和命名参数绑定是其最大优点，通过上面的对比，我相信你也知道了你在自己的项目中会使用哪一种连接数据库了？</p><h4 id="abd"><a href="#abd" class="headerlink" title="abd"></a>abd</h4><p> 转载于: <a href="https://www.cnblogs.com/feng18/p/6523646.html">https://www.cnblogs.com/feng18/p/6523646.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>StickyPosts</title>
    <link href="https://l_min.gitee.io/2020/09/03/StickyPosts/"/>
    <id>https://l_min.gitee.io/2020/09/03/StickyPosts/</id>
    <published>2020-09-03T10:04:00.000Z</published>
    <updated>2020-09-04T12:03:52.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: StickyPosts<br>date: 2020-09-03 18:04:45<br>tags: </p><hr><h3 id="是谁吞噬了你的创造力"><a href="#是谁吞噬了你的创造力" class="headerlink" title="是谁吞噬了你的创造力"></a>是谁吞噬了你的创造力</h3><p>看过《黑客帝国》吗？</p><p>影片中网络黑客尼奥发现世界其实是假的，它由“矩阵”计算机系统控制，人们只不过在静止的“昏睡中”体会自以为酸甜苦辣的真实世界。</p><p>让人觉得可怕的不是这种谎言背后的真实过于荒诞和恐怖，而是，当人工智能用虚幻世界数不尽的金钱、完美的生活来引诱获悉真相的人们时，依旧有人选择在“睡梦”中享受数字构造的富足生活，从而逃离无望的、看不到出路的人生。</p><p>《黑客帝国》剧照</p><p><img src= "/img/loading.gif" data-src="https://hexo.io/icon/favicon-196x196.png" alt></p><p>这可能是全片中最具有现实意义的细节。</p><p>人类在完美的虚幻世界和痛苦不堪的现实生活中，如何选择？</p><p>也许，我们正在不知不觉中选择前者。</p><p>1.</p><p>早上你起床，一边拉屎一边刷手机看看朋友圈，刷了几秒发现全是广告，赶紧退出开始刷公号，找到有意思的文章读一读，也许是谁的八卦，也许是某篇震耳欲聋的鸡汤营销学。</p><p>你去上班的路上，遇到遛狗的邻居，尽管常常遇到，但从没有打过招呼，你并不知道他直播的时候有粉丝刷游艇。</p><p>每天上班做设计的流程非常简单，就是打开电脑在时尚网站上浏览各种品牌图片，找到与自己品牌接近的就另存为。</p><p>中午吃饭，一边吃一边刷微博，你觉得真好，因为微博一直在推送你喜欢的明星的八卦，以及与此相关的各种内容。打开淘宝，淘宝也给你推送不少你爱豆代言的产品，目之所及，基本符合你的喜好，你感慨大数据的便利，投你所好。</p><p>下午跟同事聊起最近哪又开了网红店，约好下班一起去，到了后与同事聊得最多的是哪个角度拍出来的照片更好看，以及哪个滤镜效果好。等发完朋友圈，这顿饭变得沉默不少。</p><p>夜生活的丰富性在于，可以在网上看各种信息，你从拉萨瞬间到了米兰大教堂，间隙还在微博随手转发、唾骂今天新出的一桩案子。</p><p>拖拉到12点才上床，继续拿着手机感受世界的丰富多彩。</p><p>这样的生活挺好的，平淡的普通的温馨的小日子。</p><p>《黑客帝国》剧照</p><p>2.</p><p>逐渐，你对生活的感知大多都来自网络，依赖于线上，而不是手能摸到的、鼻子能嗅到的现实。你以为屏幕前的世界万象也是现实，可是，那并不是你亲身感受的现实。</p><p>这有什么不好吗？</p><p>你看到的漂亮花朵是别人拍了传上网的，你看到的超美景色是别人看到的，你了解到的网红店信息是别人评价的……</p><p>你依旧不觉得这有什么问题。身未动，就能看到那么多人看到的世界，极大的开阔了眼界，不是吗？</p><p>可以这么理解。</p><p>但是，我们试图换一个角度去看待这个问题。</p><p>你所看到的是别人看过、筛选过的，那种美丽是显而易见，甚至极端的，因为只有这样你才能在轻易获得的海量信息中，被其中一部分蛊惑。</p><p>久而久之，你就失去了亲身感知周遭世界的能力。</p><p>你有没有闭上眼睛去轻轻触摸一片树叶，感受上面的小刺和绒毛？</p><p>你有没有发现一些奇奇怪怪的肮脏污渍中常常藏着有趣的图案？</p><p>你有没有细细观察过海浪走过后，沙滩波纹的曲线是什么走势？</p><p>你有没有观察过透过水珠看光线时那种光感是钻石也难以企及的灵动？</p><p>我猜你都看到过，可能是小时候，但更可能是在网上，别人发现了然后将图片发出来，你再去欣赏，然后用五秒钟感叹“哇，真棒”，随手点个赞，然后就去寻找下一张别人精心挑选过、能触动到自己的美图。</p><p>而你本人，则很难在现实生活中被细小的东西触动、感受。</p><p>也就是说，你的感知依赖于别人的感知、选择和创造，而且这种依赖就像慢性毒药，你离开这个虚拟的世界在自己的世界中则很难获得满足。因为网络上的获得太便捷了、太快速了、太丰富了，与此同时，你在虚拟世界中也逐渐需要更大的感官刺激，才能提升自己的感知力。</p><p>可是不对啊，我们大部分知识获取不都是别人的经验、别人的创造吗？难道学数学要自己去总结公式吗？</p><p>通过文字传承的知识，大多经过筛选，我们不能说绝对正确，但是有一定门槛，而且，一些知识给出的是方法论或者训练某种能力。</p><p>文字和图像也有很大不同，文字结合适量的图像并不会覆盖住你的想象力，而纯粹的屏幕图像，则很难开启你的想象空间。</p><p>网络世界所提供的信息，由于人为干预变得越发的讨好，更重要的是，讨好的背后是控制以及获取你的价值。</p><p>你在一些网站、APP会看到一些的流行资讯，这些资讯是怎么被创造出来的？</p><p>网站的工作人员会总结当天的热点信息，给出关键词，然后让合作作者制造出相关的流行信息。</p><p>或许只要1-2个小时，他们就能编撰出一条毫无营养但又紧跟热点的流行。这种如流水线的工作正充斥着传播领域。今天谁去世了，那赶紧写与他相关的八卦，或者与他亲近的某人的衣着特色；谁上了热搜，那就赶紧去扒一扒他的搭配。这还仅仅是流行的角度。</p><p>当人们习惯接受这类信息之后，是很难再接受需要思考的内容。</p><p>你有没有觉得越来越看不进去书了，书买来的装饰价值远远大于它的阅读价值。遇到稍微难一点的内容你会认为错在作者，为什么作者要故意为难读者？为什么作者不能写得通俗易懂？为什么作者要装逼？</p><p>事实上，故作深沉更多出现在具有营销目的对艺术、时尚的包装中，而不一定出现在专业讨论的书籍中。</p><p>什么叫通俗易懂？贡布里希写的《艺术的故事》叫通俗易懂，罗翔讲的法律也叫通俗易懂。</p><p>不是用网络词汇代替专业词汇就叫通俗易懂，用过份娱乐化的语言来强行解释专业问题，为了娱乐性甚至罔顾事实的解析，那跟通俗易懂没有半点关系，那是带有强烈目的性的恶俗。也就是用 讨好的姿态，带有目的性的获取你的价值。</p><p>最简单的例子，比如营销号，比如最具有景观社会特质的粉丝经济。</p><p>人人都说，从读文时代，变成读图时代，再到视频时代，这些阅读习惯的转变只说明了一个问题，我们更习惯于接受别人的创造，接受的东西越来越满，越来越实体和具象，我们就更难去想象，更容易将生动的虚像当成现实。</p><p>《黑客帝国》剧照</p><p>4.</p><p>曾经有一位名为居伊·德波（Guy Debord）的学者，在1975年推出了名为《景观社会》的短片。</p><p>在 居伊·德波看来，电视影像成为 权力阶级以传播入侵个人的生活，图像组成 的大众媒体、广告和流行文化实际上是控制和榨取的工具。</p><p>靠电网传播的景观是真实存在的吗？还是一部分人想要你看到的世界？从而形成对个体的“控制”。</p><p>如果用 景观社会来解释一下现在的偶像文化与粉丝经济，你认为偶像是你所选择出来的，但背后有庞大的创造体现，这种偶然出现在一个必然的体系当中。当你的情绪被牵制得越严重，你所付出的金钱可能就越多，那么，对于你个人的生活而言，偶像是虚拟的，还是真实的？</p><p>逐渐被控制其实比你想象的容易很多。</p><p>不过，很多人对 景观社会的描述带有强大的阴谋论调，也就是一个阶层对另一个阶层的主动控制与征服。</p><p>我不这么认为。</p><p>我们逐渐被社会科技发展所左右，并非部分人在其中成为统治者，从而利用科技创造的景观社会，来榨取另一部分人的价值。</p><p>而是技术发展造成了淘汰机制，感知力被逐渐消磨的人越发失去感知力和创造力，从而成为社会的底层，而不被技术发展控制的人，则更容易用自己的创造力去感知和获得。</p><p>你想一下，大多在自己领域做出成绩的人，都是将线上世界当成工具的人，而不是将此取代生活的人。</p><p>由此，也许我们能解释，为什么近十年我们更少看到卓越的设计和艺术。</p><p>一方面前辈过于优秀，已经创造了足够丰富的作品，更重要的是，在他们成长的过程中，虚拟世界并没有控制他们的生活和创造，他们的感知能力、对世界的敏感度是极其敏锐的，创造力也是极其蓬勃的，也是更愿意去思考的。当伴随着科技便捷成长的创造者们，则更难摆脱便捷造成的迟钝。</p><p>《黑客帝国》剧照</p><p>5.</p><p>我做了一个小实验。以前写稿的方式，是在网上搜资料配合书中找相关的内容，但是，并没有时间去系统的一本一本啃书。</p><p>近三个月我换了一种方式，每天至少花一个小时读书，书的内容不一定与我要写的内容相关，当确定要写东西的时候，再配合网上搜索和书中找答案。</p><p>由此产生了一个变化，刺激我写东西的主题逐渐从网上的新闻，变成书中的一句话或者某个知识点。最初读到一些难以理解的东西时，我会头疼，但逐渐，这种头疼会慢慢消解，会觉得有意思，能理解的东西越来越多，同时，越发看不进去网络的资讯。</p><p>人的习惯是不是很可怕。</p><p>或者说，人真的太容易被低阶感受蛊惑了。</p><p>还有很重要的一点是，当我们的感受力受损时，很容易造成价值观的单一，说白了就是，你的生活、工作最大的目的是获取成功，也就是有钱。</p><p>因为虚拟社会给你的满足感大多需要金钱来获得，创造景观的人的目的多半是获取你的价值，你没其他价值，唯一的价值就是钱。</p><p>于是，赚更多的钱成为人生唯一的目标，这一点，既针对被征服者，也针对征服者。因为大家的感知力都在下降，你无法从周遭获得快感。</p><p>按理说，中国人应该有着丰富的价值观， 陶渊明说“采菊东篱下，悠然见南山”，叶茵说“万卷藏书抵万金”，我们说，要财大气粗。</p><p>6.</p><p>所以我们应该唾弃互联网？拒绝电脑，将手机扔到一边吗？</p><p>当然不是。</p><p>互联网的创造非常伟大，这是对于人类社会来说最有用的工具之一，它可以存储信息，可以方便交流，可以展示自我，从一定程度上突破阶层的界限将世界拉得扁平。</p><p>但请记住，它是工具，不是控制者。“景观”应该娱我，而不是我被娱。</p><p>我才是控制者。</p><p>几年前，我在公号公开提过一个问题：</p><p>有没有觉得当下的时尚和艺术变得越来越平庸？</p><p>当时有差不多一百多位读者回复，谈了他们的感受，当然，也有个别人说我问这种问题过于装逼了。</p><p>这个感受在写很多文章时都会遇到，比如《》，以及《》等等，都会提醒我，近十年的艺术和设计是真的缺乏创造力。</p><p>为什么会这样？</p><p>就在昨天我家电路突然坏了，导致停电超过12个小时，突然被迫有时间可以悠闲地思考这个“装逼”的问题。</p><p>于是有了这篇文章，它不一定正确。</p><p>当我们不去亲身感知，不去思考，不去读书，可能我们真的就成了被抚慰的底层，这才是恐怖故事真正的恐怖结局。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://l_min.gitee.io/2020/07/11/test/"/>
    <id>https://l_min.gitee.io/2020/07/11/test/</id>
    <published>2020-07-11T03:35:02.000Z</published>
    <updated>2020-09-03T10:17:10.664Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>newpapername</title>
    <link href="https://l_min.gitee.io/2020/07/11/newpapername/"/>
    <id>https://l_min.gitee.io/2020/07/11/newpapername/</id>
    <published>2020-07-11T03:21:18.000Z</published>
    <updated>2020-09-07T03:00:47.275Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h3><p>你好</p><p>这是一个测试文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 这是命令行格式</span><br></pre></td></tr></table></figure><p>&lt; div  class = “btn-center” &gt;<br> <a class="btn-beautify button--animated larger" href="http://www.jerryc.me" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a></p><a class="btn-beautify button--animated blue larger" href="http://www.jerryc .me" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated pink larger" href="http://www.jerryc.me" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><p>{ % btn ‘<a href="http://www.jerryc.me&#39;,JerryC,far">http://www.jerryc.me&#39;,JerryC,far</a> fa-hand-point-right,red larger %}</p><a class="btn-beautify button--animated purple larger" href="http://www.jerryc.me" title="JerryC"><i class="far fa-hand -point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated orange larger" href="http://www.jerryc.me" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated green larger" href="http://www.jerryc .me" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><p> &lt;/ div &gt;</p><p>这是我的博客: <a href="https://lenm123.github.io/">https://lenm123.github.io/</a></p><p>这是内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://l_min.gitee.io/2020/07/10/hello-world/"/>
    <id>https://l_min.gitee.io/2020/07/10/hello-world/</id>
    <published>2020-07-10T14:17:07.643Z</published>
    <updated>2020-07-11T03:27:32.923Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
